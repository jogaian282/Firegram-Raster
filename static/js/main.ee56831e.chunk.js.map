{"version":3,"sources":["comps/Title.js","firebase/config.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","hooks/useFireStore.js","comps/ImageGrid.js","comps/Modal.js","App.js","index.js"],"names":["Title","className","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","rasterStorage","rasterFireStore","timestamp","FieldValue","serverTimestamp","useStorage","selectedFile","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionInstance","collection","put","on","snap","progressPercentage","bytesTransferred","totalBytes","a","getDownloadURL","createdAt","add","ProgressBar","file","setFile","undefined","div","initial","width","animate","UploadForm","setSelectedFile","fileSupportedTypes","style","textAlign","htmlFor","type","id","display","onChange","event","eventObj","persist","selected","target","files","includes","fileUploadHandler","useFireStore","fileList","setFileList","unsub","orderBy","onSnapshot","documents","forEach","doc","push","data","ImageGrid","setSelectedImage","map","layout","onClick","key","whileHover","opacity","img","src","alt","transition","delay","Modal","selectedImage","classList","contains","y","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee56831e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>FireGram</h1>\n      <h2>Your Pictures</h2>\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </div>\n  )\n}\n\nexport default Title;","import * as firebase from 'firebase/app';\r\nimport 'firebase/storage'; // To store purpose - storage\r\nimport 'firebase/firestore'; // Database\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyAzWG2AX8LyoKWqWLcU6bNVfF3PAmLqXmU\",\r\n    authDomain: \"raster-firegram.firebaseapp.com\",\r\n    databaseURL: \"https://raster-firegram.firebaseio.com\",\r\n    projectId: \"raster-firegram\",\r\n    storageBucket: \"raster-firegram.appspot.com\",\r\n    messagingSenderId: \"1063430184040\",\r\n    appId: \"1:1063430184040:web:87a0602a921c1f10026fdd\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst rasterStorage = firebase.storage();\r\nconst rasterFireStore = firebase.firestore();\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport { rasterStorage, rasterFireStore, timestamp };","import { useState, useEffect } from 'react';\r\nimport { rasterStorage, rasterFireStore, timestamp } from \"../firebase/config\";\r\n\r\nfunction useStorage(selectedFile) {\r\n    const [progress, setProgress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    const [url, setUrl] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // References used:\r\n        // Create a reference in firebase storage where we put our file in default bucket.\r\n        const storageRef = rasterStorage.ref(selectedFile.name);\r\n        // Adds stored files properties via a collection in database.\r\n        const collectionInstance = rasterFireStore.collection('images');\r\n\r\n        // Put is used to upload file to storage in firebase and on is to attach an event\r\n        // state_changed is an event provided by firebase and react on changes of every progress.\r\n        storageRef.put(selectedFile).on('state_changed', (snap) => {\r\n            let progressPercentage = (snap.bytesTransferred/snap.totalBytes) * 100;\r\n            setProgress(progressPercentage);\r\n        }, (error) => {\r\n            setError(error);\r\n        }, async () => {\r\n            const url = await storageRef.getDownloadURL();\r\n            const createdAt = timestamp();\r\n            collectionInstance.add({\r\n                url,\r\n                createdAt\r\n            });\r\n            setUrl(url);\r\n        });\r\n        return () => {\r\n            \r\n        }\r\n    }, [selectedFile]);\r\n\r\n    return { progress, url, error}\r\n\r\n}\r\n\r\nexport default useStorage;","import React, { useEffect } from 'react';\r\nimport useStorage from '../hooks/useStorage';\r\nimport { motion } from 'framer-motion';\r\n\r\nfunction ProgressBar({file, setFile}) {\r\n    const { url, progress } = useStorage(file);\r\n    \r\n    // To reset progress.\r\n    useEffect(() => {\r\n        if (url !== undefined && url !== null) {\r\n            setFile(null);\r\n        }\r\n    }, [url, setFile]);\r\n\r\n    return (\r\n        <motion.div className=\"progress-bar\" \r\n        initial={{ width: 0}}\r\n        animate={{ width: progress + '%'}}>\r\n\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar\r\n","import React, { useState } from 'react'\r\nimport ProgressBar from './ProgressBar';\r\n\r\nfunction UploadForm() {\r\n\r\n    const [selectedFile, setSelectedFile] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    const fileSupportedTypes = ['image/png', 'image/jpeg'];\r\n\r\n    const fileUploadHandler = (eventObj) => {\r\n        eventObj.persist();\r\n        let selected = eventObj.target.files[0];\r\n        if (selected && fileSupportedTypes.includes(selected.type)) {\r\n            setSelectedFile(eventObj.target.files[0]);\r\n            setError('');\r\n        } else {\r\n            setSelectedFile(null);\r\n            setError('File format not supported. Try using png or jpeg');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form style={{textAlign: \"center\"}}>\r\n            <label htmlFor=\"upload\">\r\n                <span className=\"upload-plus\">+</span>\r\n                <input type=\"file\" id=\"upload\" style={{display: \"none\"}} onChange={(event) => fileUploadHandler(event)}/>\r\n            </label>\r\n            <div className=\"output\">\r\n                { error && <div className=\"error\">{ error }</div> }\r\n                { selectedFile && <div> { selectedFile.name } </div> }\r\n                { selectedFile && <ProgressBar file={selectedFile} setFile={setSelectedFile}></ProgressBar> }\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default UploadForm\r\n","import { useState, useEffect } from 'react';\r\nimport { rasterFireStore } from \"../firebase/config\";\r\n\r\nconst useFireStore = (collection) => {\r\n\r\n    const [fileList, setFileList] = useState([]);\r\n\r\n   // To get file list from firestore db.\r\n   useEffect(() => {\r\n        const unsub = rasterFireStore.collection(collection).orderBy('createdAt', 'desc')\r\n        .onSnapshot((snap) => {\r\n            let documents = [];\r\n            snap.forEach(doc => {\r\n                documents.push({...doc.data(), id: doc.id});\r\n            });\r\n            setFileList(documents);\r\n        });\r\n        return () => unsub();\r\n   }, [collection]);\r\n\r\n   return { fileList }\r\n   \r\n}\r\n\r\nexport default useFireStore;","import React from 'react';\r\nimport useFireStore from '../hooks/useFireStore';\r\nimport { motion } from 'framer-motion';\r\n\r\nfunction ImageGrid({setSelectedImage}) {\r\n\r\n    const {fileList} = useFireStore('images');\r\n\r\n    return (\r\n        <div className=\"img-grid\">\r\n            { fileList && fileList.map(doc => {\r\n                return (\r\n                    <motion.div layout className=\"img-wrap\" onClick={() => setSelectedImage(doc.url)} \r\n                        key={doc.id} whileHover={{ opacity: 1}}>\r\n                        <motion.img src={doc.url} alt={doc.id} \r\n                        initial={{opacity: 0}}\r\n                        animate={{opacity: 1}}\r\n                        transition={{delay: 1}}/>\r\n                    </motion.div>\r\n                )\r\n              })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageGrid\r\n","import React from 'react'\r\nimport { motion } from 'framer-motion';\r\n\r\nfunction Modal({selectedImage, setSelectedImage}) {\r\n\r\n    function closeModal(eventObj) {\r\n        if (eventObj.target.classList.contains('backdrop')) {\r\n            setSelectedImage(null);\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <motion.div className=\"backdrop\" onClick={closeModal}\r\n        initial={{opacity: 0}}\r\n        animate={{opacity: 1}}>\r\n            <motion.img src={selectedImage} alt=\"modalImage\" \r\n            initial={{ y: \"-100vh\" }}\r\n            animate={{ y: 0}}/>\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default Modal\r\n","import React, {useState} from 'react';\nimport Title from './comps/Title';\nimport UploadForm from './comps/UploadForm';\nimport ImageGrid from './comps/ImageGrid';\nimport Modal from './comps/Modal';\n\nfunction App() {\n  const [selectedImage, setSelectedImage] = useState(null);\n  return (\n    <div className=\"App\">\n      <Title/>\n      <UploadForm></UploadForm>\n      <ImageGrid setSelectedImage={setSelectedImage}></ImageGrid>\n      { selectedImage && <Modal selectedImage={selectedImage} setSelectedImage={setSelectedImage}></Modal> }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}